const { resolve } = require('path')
const { getLatest } = require('./../bud/template-utilities')

/**
 * Scaffold Plugin
 */
module.exports = {
  path: resolve(__dirname, './plugin'),
  default: {
    namespace: 'acme-co',
    name: 'acme-block',
    author: 'Wiley C.',
    email: 'wiley@acme.co',
    website: 'https://acme.com',
    title: 'ACME Co. Block',
    description: 'Short description of acme-block',
    components: ['RichText', 'InnerBlocks', 'MediaUpload'],
    category: 'common',
    supports: ['align', 'alignWide', 'inserter', 'multiple', 'reusable'],
  },
  fields: [
    {
      type: 'input',
      name: 'namespace',
      message: 'Namespace',
      initial: 'acme-co',
      default: 'acme-co',
      required: true,
    },
    {
      type: 'input',
      name: 'name',
      message: 'Name',
      initial: 'acme-block',
      required: true,
    },
    {
      type: 'input',
      name: 'title',
      message: 'Title',
      initial: 'ACME Co. Block',
      required: true,
    },
    {
      type: 'input',
      name: 'description',
      message: 'Description',
      initial: 'Short description of acme-block',
    },
    {
      type: 'input',
      name: 'author',
      message: 'Author name',
      initial: 'Wiley C.',
    },
    {
      type: 'input',
      name: 'email',
      message: 'Author email',
      initial: 'wiley@gmail.com',
    },
    {
      type: 'input',
      name: 'website',
      message: 'Website',
      initial: 'https://acme.co',
    },
    {
      type: 'multiselect',
      name: 'components',
      message: 'Components',
      choices: [{ name: 'RichText' }, { name: 'InnerBlocks' }, { name: 'MediaUpload' }],
    },
    {
      type: 'select',
      name: 'category',
      message: 'Category',
      initial: 'common',
      choices: ['common', 'formatting', 'layout', 'widgets', 'embed'],
    },
    {
      type: 'multiselect',
      name: 'supports',
      message: 'Supports',
      choices: [
        'align',
        'alignWide',
        'customClassName',
        'html',
        'inserter',
        'multiple',
        'reusable',
      ],
    },
  ],
  files: [
    {
      strategy: 'literals',
      readFrom: '_README.md.js',
      writeTo: 'README.md',
      parser: 'markdown',
    },
    {
      strategy: 'literals',
      readFrom: '_block.php.js',
      writeTo: 'block.php',
      parser: 'php',
    },
    {
      strategy: 'literals',
      readFrom: '_composer.json.js',
      writeTo: 'composer.json',
      parser: 'json',
    },
    {
      strategy: 'copy',
      readFrom: '_.babelrc.js',
      writeTo: '.babelrc.js',
    },
    {
      strategy: 'copy',
      readFrom: '_.editorconfig',
      writeTo: '.editorconfig',
    },
    {
      strategy: 'copy',
      readFrom: '_.eslintrc.js',
      writeTo: '.eslintrc.js',
    },
    {
      strategy: 'copy',
      readFrom: '_.eslintignore',
      writeTo: '.eslintignore',
    },
    {
      strategy: 'copy',
      readFrom: '_.gitignore',
      writeTo: '.gitignore',
    },
    {
      strategy: 'copy',
      readFrom: '_.postcss.config.js',
      writeTo: 'postcss.config.js',
    },
    {
      strategy: 'copy',
      readFrom: '_.prettierrc.json',
      writeTo: 'prettierrc.json',
    },
    {
      strategy: 'copy',
      readFrom: '_.stylelintrc',
      writeTo: '.stylelintrc',
    },
    {
      strategy: 'copy',
      readFrom: '_webpack.config.js',
      writeTo: 'webpack.config.js',
    },
    {
      strategy: 'json',
      readFrom: '_package.json',
      writeTo: 'package.json',
      parser: 'json',
    },
    {
      strategy: 'literals',
      readFrom: 'blocks/block/scripts/editor/_attributes.json',
      writeTo: 'blocks/block/scripts/editor/attributes.json',
      parser: 'json',
    },
    {
      strategy: 'literals',
      readFrom: 'blocks/block/scripts/editor/_block.js',
      writeTo: 'blocks/block/scripts/editor/block.js',
      parser: 'babel',
    },
    {
      strategy: 'literals',
      readFrom: 'blocks/block/scripts/editor/containers/_edit.js',
      writeTo: 'blocks/block/scripts/editor/containers/edit.js',
      parser: 'babel',
    },
    {
      strategy: 'literals',
      readFrom: 'blocks/block/scripts/editor/containers/_save.js',
      writeTo: 'blocks/block/scripts/editor/containers/save.js',
      parser: 'babel',
    },
    {
      strategy: 'literals',
      readFrom: 'blocks/block/scripts/editor/components/_Media.js',
      writeTo: 'blocks/block/scripts/editor/components/Media.js',
      parser: 'babel',
    },
    {
      strategy: 'copy',
      readFrom: 'blocks/block/scripts/public/_index.js',
      writeTo: 'blocks/block/scripts/public/index.js',
    },
    {
      strategy: 'copy',
      readFrom: 'blocks/block/styles/_common.css',
      writeTo: 'blocks/block/styles/common.css',
    },
    {
      strategy: 'copy',
      readFrom: 'blocks/block/styles/_editor.css',
      writeTo: 'blocks/block/styles/editor.css',
    },
    {
      strategy: 'copy',
      readFrom: 'blocks/block/styles/_public.css',
      writeTo: 'blocks/block/styles/public.css',
    },
  ],
  devDependencies: async () => {
    return await {
      '@babel/cli': await getLatest('@babel/cli'),
      '@babel/core': await getLatest('@babel/core'),
      '@babel/preset-env': await getLatest('@babel/preset-env'),
      '@babel/preset-react': await getLatest('@babel/preset-react'),
      '@prettier/plugin-php': await getLatest('@prettier/plugin-php'),
      '@wordpress/browserslist-config': await getLatest('@wordpress/browserslist-config'),
      '@wordpress/dependency-extraction-webpack-plugin': await getLatest(
        '@wordpress/dependency-extraction-webpack-plugin',
      ),
      autoprefixer: await getLatest('autoprefixer'),
      'babel-eslint': await getLatest('babel-eslint'),
      'babel-loader': await getLatest('babel-loader'),
      'css-loader': await getLatest('css-loader'),
      eslint: await getLatest('eslint'),
      'eslint-loader': await getLatest('eslint-loader'),
      'eslint-plugin-import': await getLatest('eslint-plugin-import'),
      'eslint-plugin-jsx-a11y': await getLatest('eslint-plugin-jsx-a11y'),
      'eslint-plugin-react': await getLatest('eslint-plugin-react'),
      'eslint-plugin-react-hooks': await getLatest('eslint-plugin-react-hooks'),
      'file-loader': await getLatest('file-loader'),
      'friendly-errors-webpack-plugin': await getLatest('friendly-errors-webpack-plugin'),
      'mini-css-extract-plugin': await getLatest('mini-css-extract-plugin'),
      'npm-run-all': await getLatest('npm-run-all'),
      'postcss-import': await getLatest('postcss-import'),
      'postcss-loader': await getLatest('postcss-loader'),
      'postcss-preset-env': await getLatest('postcss-preset-env'),
      'prop-types': await getLatest('prop-types'),
      react: await getLatest('react'),
      'react-dom': await getLatest('react-dom'),
      'style-loader': await getLatest('style-loader'),
      'uglifyjs-webpack-plugin': await getLatest('uglifyjs-webpack-plugin'),
      'url-loader': await getLatest('url-loader'),
      webpack: await getLatest('webpack'),
      'webpack-cli': await getLatest('webpack-cli'),
      'webpack-dev-server': await getLatest('webpack-dev-server'),
      'webpack-livereload-plugin': await getLatest('webpack-livereload-plugin'),
      webpackbar: await getLatest('webpackbar'),
    }
  },
}
