const {existsSync, readdirSync, statSync} = require('fs')
const {join, resolve} = require('path')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
const DependencyExtractionWebpackPlugin = require('@wordpress/dependency-extraction-webpack-plugin')
const FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin')
const ManifestPlugin = require('webpack-manifest-plugin')
const UglifyJsPlugin = require('uglifyjs-webpack-plugin')
const {HotModuleReplacementPlugin, NoEmitOnErrorsPlugin} = require('webpack')
const WebpackBar = require('webpackbar')
const WriteFilePlugin = require('write-file-webpack-plugin')

/**
 * Webpack utilities
 *
 * @return {bool}
 */
const isProduction = process.env.NODE_ENV === 'production'
const isHMR = process.env.NODE_ENV === 'hmr'

/**
 * Return array of directories
 *
 * @param  {string} parentDir
 * @return {array}
 */
const dirs = parentDir =>
  readdirSync(resolve(__dirname, parentDir)).filter(file =>
    statSync(join(parentDir, file)).isDirectory(),
  )

/**
 * Block webpack entries
 *
 * @return {object}
 */
const entry = () => {
  let assets = {}

  dirs('src/blocks').forEach(block => {
    assets = {
      ...assets,
      [`blocks/${block}/editor`]: [
        resolve(__dirname, `src/blocks/${block}/editor.js`),
        resolve(__dirname, `src/blocks/${block}/styles/editor.css`),
      ],
      [`blocks/${block}/public`]: [
        resolve(__dirname, `src/blocks/${block}/public.js`),
        resolve(__dirname, `src/blocks/${block}/styles/public.css`),
      ],
    }

    assets = {
      ...assets,
      [`blocks/${block}/editor`]: (() =>
        assets[`blocks/${block}/editor`].filter(file => existsSync(file)))(),
      [`blocks/${block}/public`]: (() =>
        assets[`blocks/${block}/public`].filter(file => existsSync(file)))(),
    }

    assets[`blocks/${block}/editor`].length <= 0 &&
      delete assets[`blocks/${block}/editor`]
    assets[`blocks/${block}/public`].length <= 0 &&
      delete assets[`blocks/${block}/public`]
  })

  return assets
}

/**
 * Webpack Configuration
 */
module.exports = {
  entry,
  context: join(__dirname, 'src'),
  devServer: {
    disableHostCheck: true,
  },
  output: {
    path: resolve(__dirname, 'dist'),
    publicPath: '/dist/',
    sourceMapFilename: '[file].map',
  },
  devtool: isProduction ? false : 'inline-source-map',
  mode: isProduction ? 'production' : 'development',
  resolve: {
    alias: {
      '@blocks': resolve(__dirname, 'src/blocks'),
      '@components': resolve(__dirname, 'src/components'),
      '@extensions': resolve(__dirname, 'src/extensions'),
      '@hooks': resolve(__dirname, 'src/hooks'),
    },
    extensions: ['.js', '.json', '.jsx', '.css'],
    modules: [resolve(__dirname, 'node_modules')],
  },
  optimization: {
    minimizer: isProduction ? [new UglifyJsPlugin()] : [],
  },
  stats: {
    all: false,
    assets: true,
    errors: true,
    timings: true,
  },
  target: 'web',
  watch: global.watch || false,
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: resolve(__dirname, 'node_modules'),
        loaders: ['babel-loader', 'eslint-loader'],
      },
      {
        test: /\.css$/,
        use: [
          {
            loader: 'file-loader',
            options: {name: '[path][name].[ext]'},
          },
          {loader: 'extract-loader'},
          {loader: 'css-loader'},
          {loader: 'postcss-loader'},
        ],
      },
      {
        test: /\.jpe?g$|\.gif$|\.png$/i,
        loader: 'file-loader?name=/img/[name].[ext]',
      },
      {
        test: /\.svg$/,
        use: ['@svgr/webpack', 'url-loader'],
      },
    ],
  },
  plugins: [
    new CleanWebpackPlugin(),
    new ManifestPlugin(),
    new DependencyExtractionWebpackPlugin({
      injectPolyfill: false,
      useDefaults: true,
      outputFormat: 'json',
    }),
    new FriendlyErrorsWebpackPlugin(),
    ...(isHMR
      ? [
          new HotModuleReplacementPlugin(),
          new NoEmitOnErrorsPlugin(),
          new WriteFilePlugin(),
        ]
      : [new WebpackBar()]),
  ],
}
