const {existsSync, readdirSync, statSync}  = require('fs')
const {join, resolve} = require('path')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
const DependencyExtractionWebpackPlugin = require('@wordpress/dependency-extraction-webpack-plugin')
const FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin')
const ManifestPlugin = require('webpack-manifest-plugin')
const UglifyJsPlugin = require('uglifyjs-webpack-plugin')
const WebpackBar = require('webpackbar')

/**
 * Webpack utilities
 */
const isProduction = process.env.NODE_ENV === 'production'

/**
 * Return array of directories
 * @param {string} parentDir
 */
const dirs = parentDir =>
  readdirSync(resolve(__dirname, parentDir))
    .filter(file =>
      statSync(join(parentDir, file)).isDirectory()
    )

/**
 * Block webpack entries
 */
const blockAssets = () =>
  dirs('src/blocks').map(block => {
    let entry = {}

    let {editorAssets, publicAssets} = {
      editorAssets: [
        resolve(__dirname, `src/blocks/${block}/scripts/editor/block.js`),
        resolve(__dirname, `src/blocks/${block}/styles/editor.css`),
      ],
      publicAssets: [
        resolve(__dirname, `src/blocks/${block}/scripts/public/index.js`),
        resolve(__dirname, `src/blocks/${block}/styles/public.css`),
      ],
    }

    editorAssets = editorAssets.filter(file => existsSync(file))
    if (editorAssets.length > 0) entry[`${block}-editor`] = editorAssets

    publicAssets = publicAssets.filter(file => existsSync(file))
    if (publicAssets.length > 0) entry[`${block}-public`] = publicAssets

    return entry
  })[0]

/**
 * Webpack Configuration
 */
module.exports = {
  entry: {
    ...blockAssets(),
  },
  output: {
    path: resolve(__dirname, 'dist'),
  },
  mode: isProduction ? 'production' : 'development',
  devtool: 'inline-source-map',
  resolve: {
    alias: {
      '@blocks': resolve(__dirname, 'src/blocks'),
      '@components': resolve(__dirname, 'src/components'),
      '@extensions': resolve(__dirname, 'src/extensions'),
    },
    extensions: ['.js', '.json', '.jsx', '.css'],
    modules: [resolve(__dirname, 'node_modules')],
  },
  optimization: {
    minimizer: isProduction ? [new UglifyJsPlugin()] : [],
  },
  stats: {
    all: false,
    assets: true,
    errors: true,
    timings: true,
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: resolve(__dirname, 'node_modules'),
        loaders: ['babel-loader', 'eslint-loader'],
      },
      {
        test: /\.css$/,
        use: [
          {
            loader: 'file-loader',
            options: {name: '[name].css'},
          },
          {loader: 'extract-loader'},
          {loader: 'css-loader'},
          {loader: 'postcss-loader'},
        ],
      },
      {
        test: /\.jpe?g$|\.gif$|\.png$/i,
        loader: 'file-loader?name=/img/[name].[ext]',
      },
      {
        test: /\.svg$/,
        use: ['@svgr/webpack', 'url-loader'],
      },
    ],
  },
  plugins: [
    new CleanWebpackPlugin(),
    new ManifestPlugin({
      output: {
        publicPath: resolve(__dirname, 'dist'),
      },
    }),
    new DependencyExtractionWebpackPlugin({
      injectPolyfill: false,
      useDefaults: true,
      outputFormat: 'json',
    }),
    new FriendlyErrorsWebpackPlugin(),
    new WebpackBar(),
  ],
}
