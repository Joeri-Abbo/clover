<?php
/**
 * Plugin Name:  {{name}}
 * Plugin URI:   {{lowercase website}}
 * Description:  {{description}}
 * Author:       {{titleize author}} <{{lowercase email}}>
 * License:      MIT
 * Text Domain:  {{lowercase (dashcase namespace)}}
 *
 * @package {{namespace}}
 */

/**
 * Register {{lowercase (dashcase namespace)}}/{{lowercase (dashcase name)}} block assets
 *
 * @see Enqueueing Editor Assets <https://git.io/JvPHy>
 * @see Dependency Extraction Webpack Plugin <https://git.io/Jv1ll>
 */
add_action('init', function () {
  (new class {
   /** @var DI\Container */
    public $bud;

    /**
     * Class constructor.
     */
    public function __construct()
    {
        $this->bud = require __DIR__ . '/app/bootstrap.php';

        $this->collection = $this->bud->get('util.collection');
        $this->blocks = $this->bud->get('blocks');
        $this->manifest = $this->bud->get('manifest');
    }

    /**
     * Class invocation.
     *
     * @throws \WP_Error
     * @return void
     */
    public function __invoke(): void
    {
        $this->loadBlocks();
        $this->registerAssets();
    }

    /**
     * Load blocks repository.
     */
    public function loadBlocks()
    {
        /** Glob src for blocks */
        $blocks = $this->collection::make(
            glob(__DIR__ . '/src/blocks/*', GLOB_ONLYDIR)
        /** Discard base paths */
        )->map(function ($path) {
            return str_replace(__DIR__ . '/src/blocks/', '', $path);
        });

        /**
         * Add blocks to repository and parse manifest for assets.
         */
        $blocks->each(function ($handle) {
            $block = $this->bud->make('block');
            $block->setHandle($handle);

            $this->manifest->getBlockAssets($block->getHandle())
                ->filter(function ($asset) use ($block) {
                    return $asset->group == $block->getHandle();
                })
                ->each(function ($asset) use ($block) {
                    $block->addAsset($asset);
                });

            $this->blocks->addBlock($block);
        });
    }

    /**
     * Register assets.
     *
     * @return void
     */
    public function registerAssets(): void
    {
        $this->blocks->getBlocks()->each(function ($block) {
            $registration = [];

            $block->getAssets()
                /** Filter out manifest objects */
                ->filter(function ($asset) {
                    return $asset->type !== 'object';
                })
                /** Register asset with WordPress */
                ->each(function ($asset) use (&$registration) {
                    $registerCall = "wp_register_{$asset->type}";

                    $registerCall(
                        $asset->handle,
                        $asset->url,
                        $asset->dependencies,
                        null,
                    );

                    /** Add to array to associate with block. */
                    $registration[$asset->registration] = $asset->handle;
                });

            register_block_type(
                $block->getHandle(),
                $registration
            );
        });
    }
  })();
});

