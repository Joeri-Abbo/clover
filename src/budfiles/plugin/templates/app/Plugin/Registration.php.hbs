<?php

namespace {{pascalcase namespace}}\Plugin;

use Illuminate\Support\Collection;
use Psr\Container\ContainerInterface;
use {{pascalcase namespace}}\Block\Contract\BlockInterface;
use {{pascalcase namespace}}\Manifest\Contract\ManifestInterface;

/**
 * Register {{lowercase (dashcase namespace)}}/{{lowercase (dashcase name)}} block assets
 *
 * @see Enqueueing Editor Assets <https://git.io/JvPHy>
 * @see Dependency Extraction Webpack Plugin <https://git.io/Jv1ll>
 */
class Registration
{
    /** @var ContainerInterface */
    public $bud;

    /** @var Collection */
    public $collection;

    /** @var ManifestInterface */
    public $manifest;

    /**
      * Class constructor.
      *
      * @param ContainerInterface bud
      * @param Collection         collection
      * @param ManifestInterface  manifest
      */
    public function __construct(
        ContainerInterface $bud,
        Collection $collection,
        ManifestInterface $manifest
    ) {
        $this->bud = $bud;
        $this->collection = $collection;
        $this->manifest = $manifest;
    }

    /**
      * Class invocation.
      *
      * @throws \WP_Error
      * @return void
      */
    public function __invoke(): void
    {
        $this->globBlocks()->map(function ($name) {
            return $this->makeBlock($name);
        })->each(function (BlockInterface $block) {
            $this->registerBlock($block);
        });

        $this->globPlugins()->map(function ($plugin) {
            return [
                'name' => $plugin,
                'assets' => $this->manifest->getPluginAssets($plugin),
            ];
        })->each(function ($plugin) {
            $this->registerPlugin($plugin);
        });
    }

    /**
     * Make block.
     *
     * @param  string         name
     * @return BlockInterface block
     */
    public function makeBlock(string $name): BlockInterface
    {
        $block = $this->bud->make(BlockInterface::class);
        $block->setName($name);

        $assets = $this->manifest->getAssets($block);
        $block->setAssets($assets);

        return $block;
    }

    /**
     * Register block.
     *
     * @param  BlockInterface block
     * @return void
     */
    public function registerBlock(BlockInterface $block): void
    {
        $block->getEditorScript() && wp_register_script(
            ...$block->getEditorScript()
        );

        $block->getEditorStyle() && wp_register_style(
            ...$block->getEditorStyle()
        );

        $block->getScript() && wp_register_script(
            ...$block->getScript()
        );

        $block->getStyle() && wp_register_style(
            ...$block->getStyle()
        );

        $block->register();
    }

    /**
     * Register plugin
     */
    public function registerPlugin($entry)
    {
        add_action('enqueue_block_editor_assets', function () use ($entry) {
            wp_enqueue_script(
                $entry['name'],
                $entry['assets']->get('script'),
                $entry['assets']->get('dependencies'),
                null,
            );
        });
    }

    /**
     * Glob blocks
     *
     * @return Collection
     */
     private function globBlocks(): Collection
     {
         return $this->collection::make(
            glob(
                $this->bud->get('path.plugin.src.blocks') . '/*',
                GLOB_ONLYDIR
            )
        )
        ->map(function ($path) {
            return str_replace(
                $this->bud->get('path.plugin.src.blocks') . '/',
                '',
                $path
            );
        });
     }

     /**
     * Glob plugins
     *
     * @return Collection
     */
    private function globPlugins(): Collection
    {
        return $this->collection::make(
           glob(
               $this->bud->get('path.plugin.src.plugins') . '/*',
               GLOB_ONLYDIR
           )
       )
       ->map(function ($path) {
           return str_replace(
               $this->bud->get('path.plugin.src.plugins') . '/',
               '',
               $path
           );
       });
    }
}