<?php

namespace {{pascalcase namespace}}\Block;

use Illuminate\Support\Collection;
use Psr\Container\ContainerInterface;
use {{pascalcase namespace}}\Asset\Contract\AssetInterface;
use {{pascalcase namespace}}\Block\Contract\BlockInterface;
use {{pascalcase namespace}}\Block\Contract\BlockRepositoryInterface;

/**
 * Block repository implementation class.
 */
class BlockRepository implements BlockRepositoryInterface
{
    /** @var Collection */
    private $blocks;

    /**
     * Construct.
     *
     * @param ContainerInterface
     */
    public function __construct(Collection $collection)
    {
        $this->blocks = $collection::make([]);
    }

    /**
     * Get block.
     *
     * @param  string
     * @return BlockInterface
     */
    public function get(string $handle): BlockInterface
    {
        return $this->blocks->get($handle);
    }

    /**
     * Get blocks.
     *
     * @return Collection
     */
    public function all(): Collection
    {
        return $this->blocks;
    }

    /**
     * Add block.
     *
     * @param  BlockInterface
     * @return void
     */
    public function add(BlockInterface $block): void
    {
        $this->blocks->put($block->getName(), $block);
    }

    /**
     * Remove block.
     *
     * @param  string $name
     * @return void
     */
    public function remove(string $name): void
    {
        $this->blocks->forget($name);
    }

    /**
     * Register block.
     *
     * @param  string $name
     * @return void
     */
    public function register(string $name): void
    {
        $block = $this->blocks->get($name);

        $block->getAssets()->each(function (AssetInterface $asset) {
            if (! in_array($asset->getType(), ['script','style'])) {
                return;
            }

            $enqueueParams = [
                $asset->getName(),
                $asset->getUrl(),
                $asset->getDependencies(),
                null
            ];

            if ($asset->type == 'script') {
                wp_register_script(...$enqueueParams);
            }

            wp_register_style(...$enqueueParams);
        });

        register_block_type($block);
    }
}
