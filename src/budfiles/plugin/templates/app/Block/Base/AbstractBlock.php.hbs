<?php

namespace {{pascalcase namespace}}\Block\Base;

use Illuminate\Support\Collection;
use Psr\Container\ContainerInterface;
use {{pascalcase namespace}}\Block\Contract\BlockInterface;

/**
 * Block class.
 */
abstract class AbstractBlock extends \WP_Block_Type implements BlockInterface
{
    /** @var string */
    public $name;

    /** @var string */
    public $namespace;

    /** @var Collection */
    public $assets;

    /**
     * Constructor.
     *
     * @param Collection
     * @param ContainerInterface
     */
    public function __construct(
        Collection $collection,
        ContainerInterface $bud
    ) {
        $this->bud = $bud;
        $this->assets = $collection::make([]);
    }

    /**
     * Get name.
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Set the block name.
     *
     * @param  string
     * @return void
     */
    public function setName(string $name): void
    {
        $this->name = join('/', [$this->getNamespace(), $name]);
    }

    /**
     * Get namespace.
     *
     * @return string
     */
    public function getNamespace(): string
    {
        return $this->bud->get('plugin.namespace');
    }

    /**
     * Set assets
     *
     * @return void
     */
    public function setAssets(Collection $assets): void
    {
        $this->assets = $assets->each(function ($asset, $handle) {
            if (
                $handle == 'editor_dependencies' ||
                $handle == 'dependencies'
            ) {
                return $this->{$handle} = $asset;
            }

            $this->{$handle} = $this->getName() . '/' . $handle;
        });
    }

    /**
     * Get editor script.
     *
     * @return array
     */
    public function getEditorScript(): array
    {
        return [
            $this->editor_script,
            $this->assets->get('editor_script'),
            $this->assets->get('editor_dependencies'),
            null,
        ];
    }

    /**
     * Get editor style.
     *
     * @return array
     */
    public function getEditorStyle(): array
    {
        return [
            $this->editor_style,
            $this->assets->get('editor_style'),
            [],
            null,
        ];
    }

    /**
     * Get script.
     *
     * @return array
     */
    public function getScript(): array
    {
        return [
            $this->script,
            $this->assets->get('script'),
            $this->assets->get('dependencies'),
            null,
        ];
    }

    /**
     * Get style.
     *
     * @return array
     */
    public function getStyle(): array
    {
        return [
            $this->style,
            $this->assets->get('style'),
            [],
            null,
        ];
    }

    /**
     * Register block.
     *
     * @return void
     */
     public function register(): void
     {
         register_block_type($this);
     }
}
