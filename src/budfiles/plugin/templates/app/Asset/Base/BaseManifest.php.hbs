<?php

namespace {{pascalcase namespace}}\Asset\Base;

use Illuminate\Support\Collection;
use Psr\Container\ContainerInterface;
use {{pascalcase namespace}}\Asset\Asset;
use {{pascalcase namespace}}\Asset\Contract\AssetInterface;
use {{pascalcase namespace}}\Asset\Contract\ManifestInterface;

/**
 * Abstract Manifest class.
 */
abstract class AbstractManifest implements ManifestInterface
{
    /** @var ContainerInterface */
    protected $bud;

    /** @var Collection */
    protected $assets;

    /** @var array */
    protected $types = [
        'js' => 'script',
        'css' => 'style',
    ];

    /**
     * Class constructor.
     *
     * @param ContainerInterface
     * @param Collection
     * @param Collection
     */
    public function __construct(
        ContainerInterface $bud,
        Collection $collection
    ) {
        $this->bud = $bud;
        $this->collection = $collection;

        $this->assets = $this->collection::make(
            $this->bud->get('plugin.manifest')
        );
    }

    /**
     * Return asset
     *
     * @return AssetInterface
     */
    public function getAsset($name, $context, $ext): AssetInterface
    {
        $blockName = str_replace($this->bud->get('plugin.namespace') . '/', '', $name);

        $entry = $this->assets->get("{$blockName}/{$context}")->{$ext};
        $uri = str_replace($this->bud->get('path.plugin.dist'), '', $entry);

        $asset = $this->bud->make(Asset::class);

        $asset->setName(join('/', [$name, $context, $this->types[$ext]]));
        $asset->setType($this->types[$ext]);
        $asset->setUrl($this->bud->get('plugin.url') . $uri);

        if ($this->types[$ext] !== 'style'
        && $dependencies = $this->getDependencies($blockName, $context)) {
            $asset->setDependencies($dependencies);
        }

        return $asset;
    }

    /**
     * Return dependency manifest
     */
    public function getDependencies($name, $context)
    {
        $manifestPath = $this->bud->get('path.plugin') . $this->assets->get("{$name}/{$context}")->json;

        return $this->collection::make(
            (object) json_decode(file_get_contents($manifestPath))
        )->get('dependencies');
    }
}
