<?php

namespace {{pascalcase namespace}}\Manifest\Base;

use Illuminate\Support\Collection;
use Psr\Container\ContainerInterface;
use {{pascalcase namespace}}\Manifest\Contract\ManifestInterface;
use {{pascalcase namespace}}\Block\Contract\BlockInterface;

/**
 * Abstract Manifest class.
 */
abstract class AbstractManifest implements ManifestInterface
{
    /** @var ContainerInterface */
    protected $bud;

    /** @var Collection */
    protected $assets;

    /** @var array */
    protected $types = [
        'js' => 'script',
        'css' => 'style',
    ];

    /**
     * Class constructor.
     *
     * @param ContainerInterface $bud
     * @param Collection         $collection
     */
    public function __construct(
        ContainerInterface $bud,
        Collection $collection
    ) {
        $this->bud = $bud;
        $this->collection = $collection;

        $this->assets = $this->getManifestContents(
            $bud->get('path.plugin.dist'),
            'assets.json'
        );
    }

    /**
     * Get asset manifest contents
     *
     * @param string distPath
     * @param string baseName
     */
    public function getManifestContents(string $distPath, string $baseName)
    {
        $path = realpath(join('/', [$distPath, $baseName]));
        if (! $path) {
            throw new \Error('No asset manifest found');
        }

        return $this->collection::make(
            $path ? json_decode(file_get_contents($path)) : (object) []
        )
        ->filter(function ($assets, string $handle) {
            return $handle;
        })
        ->map(function ($assets) {
            return $this->collection::make($assets);
        });
    }

    /**
     * Get assets.
     *
     * @param  BlockInterface $block
     * @return Collection
     */
    public function getAssets(BlockInterface $block): Collection
    {
        $assets = $this->collection::make([]);
        $name = $block->getName();

        if ($this->assets->has("editor/{$name}")) {
            $editor = $this->assets->get("editor/{$name}");

            if ($editor->has('js')) {
                $assets->put(
                    'editor_script',
                    $this->url($editor->get('js'))
                );
            }

            if ($editor->has('json')) {
                $assets->put(
                    'editor_dependencies',
                    $this->getDependencies($editor->get('json'))
                );
            }

            if ($editor->has('css')) {
                $assets->put(
                    'editor_style',
                    $this->url($editor->get('css'))
                );
            }
        }

        if ($this->assets->has("public/{$name}")) {
            $public = $this->assets->get("public/{$name}");

            if ($public->has('js')) {
                $assets->put(
                    'script',
                    $this->url($public->get('js'))
                );
            }

            if ($public->has('json')) {
                $assets->put(
                    'dependencies',
                    $this->getDependencies($public->get('json'))
                );
            }

            if ($public->has('css')) {
                $assets->put(
                    'style',
                    $this->url($public->get('css'))
                );
            }
        }

        return $assets;
    }

    /**
     * Editor plugin assets.
     *
     * @param  string name
     * @return
     */
     public function getPluginAssets(string $name)
     {
         $assets = $this->collection::make([]);

         if ($this->assets->has("plugins/{$name}")) {
            $plugin = $this->assets->get("plugins/{$name}");

            if ($plugin->has('js')) {
                $assets->put(
                    'script',
                    $this->url($plugin->get('js'))
                );
            }

            if ($plugin->has('json')) {
                $assets->put(
                    'dependencies',
                    $this->getDependencies($plugin->get('json'))
                );
            }
        }

        return $assets;
     }

    /**
     * Plugin url.
     *
     * @param  string relativePath
     * @return string
     */
    public function url(string $relativePath): string
    {
        return $this->bud->get('plugin.url') . $relativePath;
    }

    /**
     * Plugin path.
     *
     * @param  string relativePath
     * @return string
     */
    public function path(string $relativePath): string
    {
        return $this->bud->get('path.plugin') . $relativePath;
    }

    /**
     * Get dependency manifest.
     *
     * @param  string $name
     * @param  string $context
     * @return array
     */
    public function getDependencies(string $path): array
    {
        if (! $verifiedPath = realpath($this->path($path))) {
            return [];
        }

        return $this->collection::make(
            (object) json_decode(file_get_contents($verifiedPath))
        )->get('dependencies');
    }
}
