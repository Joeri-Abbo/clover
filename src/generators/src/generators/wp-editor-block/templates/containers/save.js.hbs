/** @wordpress */
import { getBlockDefaultClassName } from '@wordpress/blocks'
{{#hasAny 'components' (array 'InnerBlocks' 'RichText')}}
  import {
    {{#has 'components' 'InnerBlocks'}}InnerBlocks,{{/has}}
    {{#has 'components' 'RichText'}}RichText,{{/has}}
  } from '@wordpress/block-editor'
{{/hasAny}}

/** Modules */
import PropTypes from 'prop-types'

/**
  * The save function defines the way in which the different attributes should be combined
  * into the final markup, which is then serialized by the block editor into `post_content`.
  *
  * @see https://git.io/JfZJ9
  * @return {WPElement} Element to render.
  */
const save = ({attributes}) => {
  const className = getBlockDefaultClassName('{{namespace}}/{{name}}')
  {{#has 'components' 'RichText'}}
    const {text} = attributes;
  {{/has}}

  return (
    <div className={className}>
      {{#has 'components' 'RichText'}}
        {text && (
          <RichText.Content
            tagName={'h2'}
            className={`${className}__text`}
            value={text}
          />
        )}
      {{/has}}

      {{#has 'components' 'InnerBlocks'}}
        <InnerBlocks.Content />
      {{/has}}
    </div>
  )
}

save.propTypes = {
  {{#has 'components' 'RichText'}}
  attributes: PropTypes.shape({
    text: PropTypes.string,
  }),
  {{/has}}
}

export {save}
